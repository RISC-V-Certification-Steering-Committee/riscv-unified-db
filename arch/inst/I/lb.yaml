# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: lb
long_name: Load byte
format: { $ref: inst_format/itype.yaml# }
description: |
  Load 8 bits of data into register `rd` from an
  address formed by adding `rs1` to a signed offset.
  Sign extend the result.
definedBy: I
assembly: xd, offset(rs1)
encoding:
  match: -----------------000-----0000011
  variables:
  - format: { $ref: inst_format/itype.yaml#/fields/name=imm }
    name: offset
  - format: { $ref: inst_format/itype.yaml#/fields/name=rs1 }
    name: xs1
  - format: { $ref: inst_format/itype.yaml#/fields/name=rs1 }
    name: xd
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  XReg virtual_address = X[xs1] + sext(imm, 31);

  X[xd] = sext(read_memory<8>(virtual_address, $encoding), 8);



sail(): |
  {
    let offset : xlenbits = sign_extend(imm);
    /* Get the address, X(rs1) + offset.
       Some extensions perform additional checks on address validity. */
    match ext_data_get_addr(rs1, offset, Read(Data), width) {
      Ext_DataAddr_Error(e)  => { ext_handle_data_check_error(e); RETIRE_FAIL },
      Ext_DataAddr_OK(vaddr) =>
        if   check_misaligned(vaddr, width)
        then { handle_mem_exception(vaddr, E_Load_Addr_Align()); RETIRE_FAIL }
        else match translateAddr(vaddr, Read(Data)) {
          TR_Failure(e, _) => { handle_mem_exception(vaddr, e); RETIRE_FAIL },
          TR_Address(paddr, _) =>
            match (width) {
              BYTE =>
                process_load(rd, vaddr, mem_read(Read(Data), paddr, 1, aq, rl, false), is_unsigned),
              HALF =>
                process_load(rd, vaddr, mem_read(Read(Data), paddr, 2, aq, rl, false), is_unsigned),
              WORD =>
                process_load(rd, vaddr, mem_read(Read(Data), paddr, 4, aq, rl, false), is_unsigned),
              DOUBLE if sizeof(xlen) >= 64 =>
                process_load(rd, vaddr, mem_read(Read(Data), paddr, 8, aq, rl, false), is_unsigned),
              _ => report_invalid_width(__FILE__, __LINE__, width, "load")
            }
        }
    }
  }




