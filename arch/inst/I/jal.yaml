# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: jal
long_name: Jump and link
format: { $ref: inst_format/jtype.yaml# }
description: |
  Jump to a PC-relative offset and store the return
  address in rd.
definedBy: I
assembly: xd, imm
encoding:
  match: -------------------------1101111
  variables:
  - field: { $ref: inst_format/jtype.yaml#/fields/name=imm }
    name: imm
  - field: { $ref: inst_format/jtype.yaml#/fields/name=rd }
    name: xd
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  XReg retrun_addr = $pc + 4;

  jump_halfword($pc + sext(imm, 31));
  X[xd] = retrun_addr;



sail(): |
  {
    let t : xlenbits = PC + sign_extend(imm);
    /* Extensions get the first checks on the prospective target address. */
    match ext_control_check_pc(t) {
      Ext_ControlAddr_Error(e) => {
        ext_handle_control_check_error(e);
        RETIRE_FAIL
      },
      Ext_ControlAddr_OK(target) => {
        /* Perform standard alignment check */
        if bit_to_bool(target[1]) & not(extension("C"))
        then {
          handle_mem_exception(target, E_Fetch_Addr_Align());
          RETIRE_FAIL
        } else {
          X(rd) = get_next_pc();
          set_next_pc(target);
          RETIRE_SUCCESS
        }
      }
    }
  }




