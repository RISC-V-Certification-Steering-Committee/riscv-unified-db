<<<
[appendix]
== CSR Details

<% portfolio_design.in_scope_csrs.sort_by(&:name).each do |csr| -%>
<<<
[[csr-<%= csr.name %>-def]]
=== <%= csr.name %>

*<%= csr.long_name %>*

<% unless csr.base.nil? -%>
[NOTE]
--
`<%= csr.name %>` is only defined in RV<%= csr.base %>.
--
<% end -%>

<%= csr.description %>

==== Attributes
[%autowidth]
|===
h| CSR Address    | <%= "0x#{csr.address.to_s(16)}" %>
<% if csr.priv_mode == 'VS' -%>
h| Virtual CSR Address    | <%= "0x#{csr.virtual_address.to_s(16)}" %>
<% end -%>
h| Defining extension a| <%= csr.defined_by_condition.to_asciidoc %>
<% if csr.dynamic_length?(design) -%>
h| Length         | <%= csr.length_pretty(design) %>
<% else -%>
h| Length         | <%= csr.length_pretty(design) %>
<% end -%>
h| Privilege Mode | <%= csr.priv_mode %>
|===


==== Format
<% unless csr.dynamic_length?(design) || csr.implemented_fields(design).any? { |f| f.dynamic_location?(design) } -%>
<%# CSR has a known static length, so there is only one format to display -%>
.<%= csr.name %> format
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(design, csr.base.nil? ? 32 : csr.base, optional_type: 2) %>
....
<% else -%>
<%# CSR has a dynamic length, or a field has a dynamic location,
    so there is more than one format to display -%>
This CSR format changes dynamically with XLEN.

.<%= csr.name %> Format when <%= csr.length_cond32 %>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(design, 32, optional_type: 2) %>
....

.<%= csr.name %> Format when <%= csr.length_cond64 %>
[wavedrom, ,svg,subs='attributes',width="100%"]
....
<%= JSON.dump csr.wavedrom_desc(design, 64, optional_type: 2) %>
....


<% end # unless dynamic length -%>

==== Field Summary

// use @ as a separator since IDL code can contain |
[%autowidth,separator=@,float="center",align="center",cols="^,<,<,<",options="header",role="stretch"]
|===
@ Name @ Location @ Type @ Reset Value

<%- csr.implemented_fields(design).each do |field| -%>
@ xref:<%=csr.name%>-<%=field.name%>-def[`<%= field.name %>`]
a@
<%- if field.dynamic_location?(design) -%>

[when,"<%= field.location_cond32 %>"]
--
<%= field.location_pretty(design, 32) %>
--

[when,"<%= field.location_cond64 %>"]
--
<%= field.location_pretty(design, 64) %>
--

<%- else -%>
<%= field.location_pretty(design) %>
<%- end -%>
a@

--
<%= field.type_pretty(design.symtab) %>
--

a@

--
<%= field.reset_value_pretty(design) %>
--

<%- end -%>
|===

==== Fields

<%- if csr.implemented_fields(design).empty? -%>
This CSR has no fields. However, it must still exist (not cause an `Illegal Instruction` trap) and always return zero on a read.
<%- else -%>

<%- csr.implemented_fields(design).each do |field| -%>
[[<%=csr.name%>-<%=field.name%>-def]]
===== `<%= field.name %>`

<%- if !field.defined_in_all_bases? -%>
IMPORTANT: <%= field.name %> is only defined in <%= field.base32_only? ? "RV32" : "RV64" %> (`<%= field.base32_only? ? field.location_cond32 : field.location_cond64 %>`)
<%- end -%>

****
Location::
<%= field.location_pretty(design) %>

Description::
<%= field.description.gsub("\n", " +\n") %>

Type::
<%= field.type_pretty(design.symtab) %>

Reset value::
<%= field.reset_value_pretty(design) %>

****

<%- end -%>
<%- end -%>

<%- if csr.implemented_fields(design).map(&:has_custom_sw_write?).any? -%>
==== Software write

This CSR may store a value that is different from what software attempts to write.

When a software write occurs (_e.g._, through `csrrw`), the following determines the
written value:

[idl]
----
<%- csr.implemented_fields(design).each do |field| -%>
<%- if field.has_custom_sw_write? -%>
<%= field.name %> = <%= field["sw_write(csr_value)"] %>
<%- else -%>
<%= field.name %> = csr_value.<%= field.name %>
<%- end -%>
<%- end -%>
----
<%- end -%>

<%- if csr.has_custom_sw_read? -%>
==== Software read

This CSR may return a value that is different from what is stored in hardware.

[source,idl,subs="specialchars,macros"]
----
<%= csr.sw_read_ast(design.symtab).gen_adoc %>
----
<%- end -%>

<% end # do in_scope_csrs -%>
