{
  "$schema": "http://json-schema.org/draft-07/schema#",

  "$defs": {
    "field_location": {
      "description": "Location specifier for a field",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^(([0-9]+)|([0-9]+-[0-9]+))(\\|(([0-9]+)|([0-9]+-[0-9]+)))*$"
        },
        {
          "type": "integer",
          "minimum": 0,
          "maximum": 31
        }
      ]
    },
    "variable_metadata": {
      "properties": {
        "location": {
          "$ref": "#/$defs/field_location"
        },
        "sign_extend": {
          "type": "boolean",
          "default": false,
          "description": "Whether or not the field should be sign extended when used"
        },
        "left_shift": {
          "type": "integer",
          "default": 0,
          "description": "Amount the field should be left shifted before use (e.g., for opcode[5:3], left_shift is 3)"
        },
        "alias": {
          "type": "string",
          "description": "Alias of the field. Used when a field can represent multiple things, e.g., when a source register is also the destination register"
        },
        "not": {
          "oneOf": [
            {
              "type": "integer"
            },
            {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          ],
          "description": "Specific value(s) that are not permitted for this field."
        }
      },
      "required": ["location"],
      "additionalProperties": false
    },
    "field": {
      "description": "Decode field",
      "type": "object",
      "oneOf": [
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "$inherits": {
              "type": "string",
              "pattern": "^common/inst_variable_types\\.yaml#/[a-zA-Z0-9_]+",
              "description": "Reference to variable metadata"
            }
          },
          "additionalProperties": false
        },
        {
          "properties": {
            "name": {
              "type": "string"
            },
            "$child_of": {
              "type": "string",
              "pattern": "^common/inst_variable_types\\.yaml#/[a-zA-Z0-9_]+",
              "description": "Cookie crumb of the reference to variable metadata"
            },
            "location": {
              "$ref": "#/$defs/field_location"
            },
            "sign_extend": {
              "type": "boolean",
              "default": false,
              "description": "Whether or not the field should be sign extended when used"
            },
            "left_shift": {
              "type": "integer",
              "default": 0,
              "description": "Amount the field should be left shifted before use (e.g., for opcode[5:3], left_shift is 3)"
            },
            "alias": {
              "type": "string",
              "description": "Alias of the field. Used when a field can represent multiple things, e.g., when a source register is also the destination register"
            },
            "not": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              ],
              "description": "Specific value(s) that are not permitted for this field."
            }
          },
          "required": ["name", "location"],
          "additionalProperties": false
        }
      ]
    },
    "encoding": {
      "type": "object",
      "properties": {
        "match": {
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[01-]{43}11111$",
              "description": "48-bit encoding"
            },
            {
              "type": "string",
              "pattern": "^[01-]{30}11$",
              "description": "32-bit encoding"
            },
            {
              "type": "string",
              "pattern": "^[01-]{14}((00)|(01)|(10))$",
              "description": "16-bit encoding"
            }
          ]
        },
        "variables": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/field"
          }
        },
        "additionalProperties": false
      },
      "additionalProperties": false
    },
    "ctp-steps": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["description"],
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string"
          }
        }
      }
    },
    "inst_data": {
      "type": "object",
      "required": [
        "$schema",
        "kind",
        "name",
        "long_name",
        "description",
        "definedBy",
        "access",
        "assembly"
      ],
      "additionalProperties": false,
      "properties": {
        "$schema": {
          "type": "string",
          "format": "uri-reference",
          "const": "inst_schema.json#",
          "description": "Path to schema, relative to <UDB ROOT>/schemas"
        },
        "kind": {
          "type": "string",
          "const": "instruction"
        },
        "name": {
          "type": "string",
          "pattern": "^[a-z0-9.]+$",
          "description": "Instruction mnemonic (must be lowercase)"
        },
        "long_name": {
          "type": "string",
          "description": "Short description of the instruction"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the instruction"
        },
        "definedBy": {
          "$ref": "schema_defs.json#/$defs/requires_entry",
          "description": "Extension(s) that defines the instruction"
        },
        "excludedBy": {
          "$ref": "schema_defs.json#/$defs/requires_entry",
          "description": "Extension(s) that, if implemented, exclude the instruction (even if the definedBy extension is also implemented)"
        },
        "encoding": {
          "description": "Instruction encoding and decode variables",
          "oneOf": [
            {
              "$ref": "#/$defs/encoding"
            },
            {
              "type": "object",
              "properties": {
                "RV32": {
                  "$ref": "#/$defs/encoding"
                },
                "RV64": {
                  "$ref": "#/$defs/encoding"
                }
              },
              "required": ["RV32", "RV64"],
              "additionalProperties": false
            }
          ]
        },
        "base": {
          "enum": [32, 64],
          "description": "When present, instruction is only defined for RV32 or RV64 base"
        },
        "access": {
          "type": "object",
          "required": ["s", "u", "vs", "vu"],
          "properties": {
            "m": {
              "enum": ["always", "sometimes", "never"],
              "default": "always"
            },
            "s": {
              "enum": ["always", "sometimes", "never"],
              "default": "always"
            },
            "u": {
              "enum": ["always", "sometimes", "never"],
              "default": "always"
            },
            "vs": {
              "enum": ["always", "sometimes", "never"],
              "default": "always"
            },
            "vu": {
              "enum": ["always", "sometimes", "never"],
              "default": "always"
            }
          }
        },
        "access_detail": {
          "type": "string",
          "description": "Extra detail about access when at least one mode is 'sometimes'"
        },
        "operation()": {
          "type": "string",
          "description": "Functional description of the instruction using IDL language"
        },
        "sail()": {
          "type": "string",
          "description": "Functional description of the instruction using Sail"
        },
        "cert-coverage-points": {
          "description": "Architecturally visible behaviors requiring validation by certification tests",
          "type": "array",
          "required": ["name", "xref", "description"],
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string"
            },
            "xref": {
              "type": "string",
              "description": "Cross reference to ISA manual or IDL"
            },
            "description": {
              "type": "string"
            }
          }
        },
        "cert-test-plan": {
          "description": "How certification coverage points will be validated",
          "type": "array",
          "required": ["name", "description", "coverage-points"],
          "additionalProperties": false,
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "coverage-points": {
              "type": "array",
              "description": "List of certification coverage points to be validated",
              "items": {
                "type": "string"
              }
            },
            "setup": {
              "$ref": "#/$defs/ctp-steps",
              "description": "List of steps to setup test"
            },
            "execution": {
              "$ref": "#/$defs/ctp-steps",
              "description": "List of steps to execute test after setup"
            },
            "validation": {
              "$ref": "#/$defs/ctp-steps",
              "description": "List of steps to determine test pass/fail status"
            },
            "teardown": {
              "$ref": "#/$defs/ctp-steps",
              "description": "List of steps to get ready for the next test"
            }
          }
        },
        "assembly": {
          "type": "string",
          "description": "Assembly format of the instruction. Can use decode variables"
        },
        "data_independent_timing": {
          "type": "boolean",
          "description": "Whether or not the instruction must execute with data-independent timing when the Zkt extension is supported",
          "default": false
        },
        "pseudoinstructions": {
          "description": "Variations of this instruction that form a pseudoinstruction",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "when": {
                "type": "string",
                "description": "Condition when the instruction has an alias"
              },
              "to": {
                "type": "string",
                "description": "pseudoinstruction format"
              }
            },
            "additionalProperties": false
          }
        },
        "$source": {
          "description": "Path to the source file. Used by downstream tooling; not expected to be found in handwritten files",
          "type": "string"
        }
      }
    }
  },

  "$ref": "#/$defs/inst_data"
}
