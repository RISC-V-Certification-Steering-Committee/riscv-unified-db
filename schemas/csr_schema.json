{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CSR description",
  "description": "A CSR register specification",
  "$ref": "#/$defs/csr_register",
  "$defs": {
    "csr_field": {
      "description": "Field in a CSR register",
      "type": "object",
      "allOf": [
        {
          "$comment": "Location is required, but it can either be a static value or a function",
          "oneOf": [
            {
              "required": ["location"]
            },
            {
              "required": ["location_rv32", "location_rv64"]
            }
          ]
        },
        {
          "$comment": "type is required, but it can either be a static value or a function",
          "oneOf": [
            {
              "required": ["type"]
            },
            {
              "required": ["type()"]
            }
          ]
        },
        {
          "$comment": "reset_value is required, but it can either be a static value or a function",
          "oneOf": [
            {
              "required": ["reset_value"]
            },
            {
              "required": ["reset_value()"]
            }
          ]
        },
        {
          "if": {
            "anyOf": [
              {
                "required": ["type"],
                "properties": {
                  "type": {
                    "const": "RW-R"
                  }
                }
              },
              {
                "required": ["type"],
                "properties": {
                  "type": {
                    "const": "RW-RH"
                  }
                }
              }
            ]
          },
          "then": {
            "required": ["sw_write(csr_value)"]
          }
        }
      ],
      "required": ["description"],
      "properties": {
        "description": {
          "description": "Function of the field",
          "type": "string"
        },
        "type": {
          "description": "Type of the field. One of:\n * RO: Read-only immutable\n * RO-H: Read-only, updated by hardware\n * RW: Read-write, not updated by hardware\n * RW-R: Read-write, but values are restricted. sw_write(value) must be provided\n * RW-H: Read-write, with hardware updates\n * RW-RH: Read-write, with hardware updates, but values are restricted. sw_write(value) must be provided",
          "enum": ["RO", "RO-H", "RW", "RW-R", "RW-H", "RW-RH"]
        },
        "affectedBy": {
          "description": "Extension(s) that affect the definition of the field beyond the extension (or base) the field is originally defined in",
          "oneOf": [
            {
              "type": "string",
              "pattern": "^(RV64)|([A-WY]|(Z[a-z]+)|(S[a-z]+))$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(RV64)|([A-WY]|(Z[a-z]+)|(S[a-z]+))$"
              }
            }
          ]
        },
        "alias": {
          "description": "When specified, indicates that this field aliases (a portion of) another CSR field",
          "oneOf": [
            {
              "type": "string",
              "pattern": "^[a-z][a-z0-9]+\\.[A-Z0-9]+(\\[[0-9]+(:[0-9]+)?\\])?$"
            },
            {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[a-z][a-z0-9]+\\.[A-Z0-9]+(\\[[0-9]+(:[0-9]+)?\\])?$"
              }
            }
          ]
        },
        "base": {
          "description": "When a CSR field is only defined in RV32, or RV64, the base that defines it. When defined in both, this field should be absent.",
          "type": "integer",
          "enum": [32, 64]
        },
        "definedBy": {
          "description": "Where this field is defined: indicates that the field is only present if the extension(s) are implemented. If definedBy is not given, defaults to the definedBy field of the parent CSR",
          "$ref": "schema_defs.json#/$defs/requires_entry"
        },
        "legal?(csr_value)": {
          "description": "Function that returns whether or not an attempted value for the field is legal. The csr_value parameter is the *entire* attempted CSR write value. Fields within the attempted write value can be accessed with a dot operator (e.g., csr_value.SXL, csr_value.VGEIN, ...)",
          "type": "string"
        },
        "location": {
          "description": "Location of the field within the CSR register",
          "$ref": "schema_defs.json#/$defs/field_location"
        },
        "location_rv32": {
          "description": "Location of the field within the CSR register when the effective XLEN of the current mode is 32",
          "$ref": "schema_defs.json#/$defs/field_location"
        },
        "location_rv64": {
          "description": "Location of the field within the CSR register when the effective XLEN of the current mode is 64",
          "$ref": "schema_defs.json#/$defs/field_location"
        },
        "name": {
          "description": "Name of the field. Optional because it is implied by the object key of the CSR object holding the field",
          "type": "string"
        },
        "reset_value": {
          "description": "Value of the state after reset. Can be UNDEFINED_LEGAL for the generic architecture spec, but must have an integer value for the implementation spec",
          "oneOf": [
            {
              "description": "A precise reset value",
              "type": "integer"
            },
            {
              "description": "State is undefined, though it must be a legal value for the state.",
              "type": "string",
              "const": "UNDEFINED_LEGAL"
            }
          ]
        },
        "reset_value()": {
          "description": "Configuration-dependent value of the state after reset. Can be UNDEFINED_LEGAL for the generic architecture spec, but must have an integer value for the implementation spec.",
          "type": "string"
        },
        "sw_write(csr_value)": {
          "description": "Function implementing custom write behavior for the CSR. Given a 'value', return either the value to be written in the field or false if the write would be illegal. 'value' is the value of the entire CSR, which is sometimes needed to detect illegal writes",
          "type": "string"
        },
        "type()": {
          "description": "Function that returns a configuration-dependent type. The return value should be a CsrFieldType enum, and must be compile-time-known.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "csr_register": {
      "$comment": "If mode is VS, then there must be a virtual_address field",
      "type": "object",
      "allOf": [
        {
          "if": {
            "properties": {
              "priv_mode": {
                "const": "VS"
              }
            }
          },
          "then": {
            "required": ["virtual_address"],
            "properties": {
              "virtual_address": {
                "description": "Address of the CSR viewed from VS-mode",
                "type": "number"
              }
            }
          }
        },
        {
          "oneOf": [
            {
              "required": ["address"],
              "properties": {
                "indirect": {
                  "const": false
                }
              }
            },
            {
              "required": ["indirect_address"],
              "properties": {
                "indirect": {
                  "const": true
                }
              }
            }
          ]
        }
      ],
      "required": [
        "$schema",
        "kind",
        "name",
        "long_name",
        "length",
        "description",
        "priv_mode",
        "definedBy"
      ],
      "properties": {
        "$schema": {
          "description": "Path to schema, relative to <UDB ROOT>/schemas",
          "type": "string",
          "const": "csr_schema.json#",
          "format": "uri-reference"
        },
        "requires": {
          "description": "Extension that must be implemented for this CSR to exist",
          "type": "string"
        },
        "description": {
          "oneOf": [
            {
              "description": "A full Asciidoc description of the CSR, intended to be used as documentation.",
              "type": "string"
            },
            {
              "description": "A full Asciidoc description of the CSR, intended to be used as documentation.",
              "type": "object",
              "properties": {
                "$copy": {
                  "type": "string",
                  "format": "uri-reference"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "$comment": "Conditionally required; see below",
        "$source": {
          "description": "Path to the source file this definition came from; used by downstream tooling -- not expected to be in handwritten files",
          "type": "string"
        },
        "address": {
          "description": "Address of the CSR, as given to the CSR access instructions of the `Zicsr` extension",
          "type": "integer",
          "maxValue": 4095,
          "minValue": 0
        },
        "base": {
          "description": "When a CSR is only defined in RV32, or RV64, the base that defines it. When defined in both, this field should be absent.",
          "type": "integer",
          "enum": [32, 64]
        },
        "definedBy": {
          "description": "Extension(s) that define the CSR",
          "$ref": "schema_defs.json#/$defs/requires_entry"
        },
        "fields": {
          "description": "fields of this CSR",
          "type": "object",
          "patternProperties": {
            "^[a-zA-Z].*$": {
              "$ref": "#/$defs/csr_field"
            }
          },
          "additionalProperties": false
        },
        "indirect": {
          "description": "Whether or not the CSR is accessible via an indirect address",
          "default": false,
          "type": "boolean"
        },
        "indirect_address": {
          "description": "Indirect address of the CSR, as given to the indirect CSRs of the `Smcsrind`/`Sscdrind` extensions",
          "type": "integer"
        },
        "kind": {
          "description": "Object type",
          "type": "string",
          "const": "csr"
        },
        "length": {
          "description": "Length, in bits, of the CSR. Can either be a 32, 64 or MXLEN, SXLEN, VSXLEN to indicate that is is dependent on the effective XLEN for a given mode",
          "enum": [32, 64, "MXLEN", "SXLEN", "VSXLEN"]
        },
        "long_name": {
          "description": "Descriptive name for the CSR",
          "type": "string"
        },
        "name": {
          "description": "CSR name",
          "type": "string",
          "pattern": "^[a-z][a-z0-9_.]+$"
        },
        "priv_mode": {
          "enum": ["M", "S", "U", "VS"]
        },
        "sw_read()": {
          "description": "Function that returns the value of the CSR when read by software (i.e., a Zicsr instruction). If not specified, the value last written (through hw_write) is returned.",
          "type": "string"
        },
        "virtual_address": true
      },
      "additionalProperties": false
    }
  }
}
